/* Author : Ashwin Rameshan
** Net ID : 2021163997
** Starting Date : Sep 14 2014
** Purpose : Assignment 1
** Class Number : CS6301.022
** Purpose : Assignment 1 - Contact Manager
*/

/*
** Module : ContactManagerFrame.java 
** Description : Execution of the program starts with this .java file. 
** ContactManagerFrame is the main class of the project. Execution statrs at the
** main() funcion in the program.
*/
package contactManager; 
/*
** File specific import statements.
*/

import com.sun.java.accessibility.util.EventID;
import java.awt.Color;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
/*
** Main Class that defines and initializes the Frame which houses all components.
** 
*/
public class ContactManagerFrame extends javax.swing.JFrame 
{
   /*
    ** Initialization statements
    */ 
    
    static String genderVal = null;
    String [] columnNames = new String[]{"First Name", "Middle Name", "Last Name", "Phone Number"};    // olumn names to be used int able
    static DefaultTableModel tableModel = new DefaultTableModel(0,4); // set a deaflt model used to set the table in the frame.
    ButtonGroup buttonGroup = new ButtonGroup(); // Button Group initialization to hold Gender radio buttons
    File file = new File("../Contact.txt"); // initialize the text file used across the program
    
    /**
     * Creates new form ContactManagerFrame
     */
    public ContactManagerFrame() 
    {
         initComponents();
         this.setTitle("Contact Manager");
         buttonGroup.add(rdoMale);
         buttonGroup.add(rdoFemale); btnDisplay.setVisible(false);
         tableModel.setColumnIdentifiers(columnNames); 
        // tableModel.setColumnIdentifiers(columnNames);
         btndelete.setEnabled(false); btnUpdate.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CustomerInfoPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PersonalPanel = new javax.swing.JPanel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblMiddleName = new javax.swing.JLabel();
        txtMiddleName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        rdoGroupPanel = new javax.swing.JPanel();
        rdoMale = new javax.swing.JRadioButton();
        rdoFemale = new javax.swing.JRadioButton();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblAddressLine1 = new javax.swing.JLabel();
        txtAddressLine1 = new javax.swing.JTextField();
        lblAddressLine2 = new javax.swing.JLabel();
        txtAddressLine2 = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        lblZipCode = new javax.swing.JLabel();
        txtZipCode = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        btnDisplay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        lblStatusDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(730, 572));
        setPreferredSize(new java.awt.Dimension(730, 572));
        setResizable(false);

        CustomerInfoPanel.setBackground(new java.awt.Color(102, 102, 102));
        CustomerInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contact Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        CustomerInfoPanel.setForeground(new java.awt.Color(245, 241, 241));
        CustomerInfoPanel.setMinimumSize(new java.awt.Dimension(710, 520));
        CustomerInfoPanel.setPreferredSize(new java.awt.Dimension(720, 520));

        jScrollPane3.setMinimumSize(new java.awt.Dimension(700, 480));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(700, 480));

        PersonalPanel.setBackground(new java.awt.Color(51, 51, 51));
        PersonalPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        PersonalPanel.setForeground(new java.awt.Color(255, 255, 255));
        PersonalPanel.setPreferredSize(new java.awt.Dimension(682, 700));

        lblFirstName.setBackground(new java.awt.Color(0, 0, 0));
        lblFirstName.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblFirstName.setForeground(new java.awt.Color(102, 255, 255));
        lblFirstName.setText("First Name *");

        txtFirstName.setBackground(new java.awt.Color(204, 204, 204));
        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });
        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusLost(evt);
            }
        });
        txtFirstName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFirstNamePropertyChange(evt);
            }
        });

        lblMiddleName.setBackground(new java.awt.Color(255, 255, 255));
        lblMiddleName.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblMiddleName.setForeground(new java.awt.Color(102, 255, 255));
        lblMiddleName.setText("Middle Initial ");

        txtMiddleName.setBackground(new java.awt.Color(204, 204, 204));
        txtMiddleName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMiddleNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMiddleNameFocusLost(evt);
            }
        });

        lblLastName.setBackground(new java.awt.Color(255, 255, 255));
        lblLastName.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblLastName.setForeground(new java.awt.Color(102, 255, 255));
        lblLastName.setText("Last Name *");

        txtLastName.setBackground(new java.awt.Color(204, 204, 204));
        txtLastName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLastNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastNameFocusLost(evt);
            }
        });

        rdoGroupPanel.setBackground(new java.awt.Color(51, 51, 51));
        rdoGroupPanel.setPreferredSize(new java.awt.Dimension(100, 23));
        rdoGroupPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdoGroupPanelFocusLost(evt);
            }
        });

        rdoMale.setBackground(new java.awt.Color(51, 51, 51));
        rdoMale.setForeground(new java.awt.Color(204, 255, 255));
        rdoMale.setText("Male");
        rdoMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMaleActionPerformed(evt);
            }
        });

        rdoFemale.setBackground(new java.awt.Color(51, 51, 51));
        rdoFemale.setForeground(new java.awt.Color(204, 255, 255));
        rdoFemale.setText("Female");

        javax.swing.GroupLayout rdoGroupPanelLayout = new javax.swing.GroupLayout(rdoGroupPanel);
        rdoGroupPanel.setLayout(rdoGroupPanelLayout);
        rdoGroupPanelLayout.setHorizontalGroup(
            rdoGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rdoGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoMale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(rdoFemale)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        rdoGroupPanelLayout.setVerticalGroup(
            rdoGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rdoGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rdoMale)
                .addComponent(rdoFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblPhoneNumber.setBackground(new java.awt.Color(255, 255, 255));
        lblPhoneNumber.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblPhoneNumber.setForeground(new java.awt.Color(102, 255, 255));
        lblPhoneNumber.setText("Phone Number *");

        txtPhoneNumber.setBackground(new java.awt.Color(204, 204, 204));
        txtPhoneNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneNumberActionPerformed(evt);
            }
        });
        txtPhoneNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPhoneNumberFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhoneNumberFocusLost(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 255, 255));
        jLabel6.setText("Gender *");

        lblAddressLine1.setBackground(new java.awt.Color(255, 255, 255));
        lblAddressLine1.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblAddressLine1.setForeground(new java.awt.Color(102, 255, 255));
        lblAddressLine1.setText("Address Line 1 *");
        lblAddressLine1.setMaximumSize(new java.awt.Dimension(82, 16));
        lblAddressLine1.setMinimumSize(new java.awt.Dimension(82, 16));
        lblAddressLine1.setPreferredSize(new java.awt.Dimension(82, 16));

        txtAddressLine1.setBackground(new java.awt.Color(204, 204, 204));
        txtAddressLine1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressLine1ActionPerformed(evt);
            }
        });
        txtAddressLine1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddressLine1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddressLine1FocusLost(evt);
            }
        });

        lblAddressLine2.setBackground(new java.awt.Color(255, 255, 255));
        lblAddressLine2.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblAddressLine2.setForeground(new java.awt.Color(102, 255, 255));
        lblAddressLine2.setText("Address Line 2");

        txtAddressLine2.setBackground(new java.awt.Color(204, 204, 204));
        txtAddressLine2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddressLine2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddressLine2FocusLost(evt);
            }
        });

        lblCity.setBackground(new java.awt.Color(255, 255, 255));
        lblCity.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblCity.setForeground(new java.awt.Color(102, 255, 255));
        lblCity.setText("City *");

        txtCity.setBackground(new java.awt.Color(204, 204, 204));
        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCityFocusLost(evt);
            }
        });

        lblState.setBackground(new java.awt.Color(255, 255, 255));
        lblState.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblState.setForeground(new java.awt.Color(102, 255, 255));
        lblState.setText("State *");

        txtState.setBackground(new java.awt.Color(204, 204, 204));
        txtState.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStateFocusLost(evt);
            }
        });

        lblZipCode.setBackground(new java.awt.Color(255, 255, 255));
        lblZipCode.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblZipCode.setForeground(new java.awt.Color(102, 255, 255));
        lblZipCode.setText("Zip Code *");

        txtZipCode.setBackground(new java.awt.Color(204, 204, 204));
        txtZipCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtZipCodeActionPerformed(evt);
            }
        });
        txtZipCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtZipCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZipCodeFocusLost(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 204, 255));
        btnUpdate.setForeground(new java.awt.Color(255, 0, 0));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btndelete.setBackground(new java.awt.Color(204, 204, 255));
        btndelete.setForeground(new java.awt.Color(255, 0, 0));
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 204, 255));
        btnClear.setForeground(new java.awt.Color(255, 0, 0));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(204, 204, 255));
        addButton.setForeground(new java.awt.Color(255, 0, 0));
        addButton.setText("Save");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        btnDisplay.setBackground(new java.awt.Color(204, 204, 255));
        btnDisplay.setForeground(new java.awt.Color(255, 0, 0));
        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        jScrollPane1.setAutoscrolls(true);

        myTable.setBackground(new java.awt.Color(102, 102, 102));
        myTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        myTable.setFont(new java.awt.Font("Calibri", 2, 14)); // NOI18N
        myTable.setForeground(new java.awt.Color(153, 204, 255));
        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "First Name", "Middle Name", "Last Name", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        myTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        myTable.setAutoscrolls(false);
        myTable.setGridColor(new java.awt.Color(153, 153, 255));
        myTable.setMinimumSize(new java.awt.Dimension(60, 80));
        myTable.setPreferredSize(new java.awt.Dimension(100, 80));
        myTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(myTable);

        lblStatusDisplay.setForeground(new java.awt.Color(102, 255, 255));
        lblStatusDisplay.setText(".");
        lblStatusDisplay.setName("lblStatusDisplay"); // NOI18N

        javax.swing.GroupLayout PersonalPanelLayout = new javax.swing.GroupLayout(PersonalPanel);
        PersonalPanel.setLayout(PersonalPanelLayout);
        PersonalPanelLayout.setHorizontalGroup(
            PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PersonalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoGroupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PersonalPanelLayout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(btnUpdate)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btndelete)
                            .addGap(188, 188, 188)
                            .addComponent(btnDisplay)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))
                    .addGroup(PersonalPanelLayout.createSequentialGroup()
                        .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .addComponent(lblFirstName)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName)
                            .addComponent(txtAddressLine1)
                            .addComponent(lblAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddressLine2)
                            .addComponent(lblAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPhoneNumber)
                            .addGroup(PersonalPanelLayout.createSequentialGroup()
                                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblState, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                                    .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblMiddleName)
                            .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                .addComponent(txtMiddleName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(123, 123, 123))
                    .addGroup(PersonalPanelLayout.createSequentialGroup()
                        .addComponent(lblStatusDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnUpdate, btndelete});

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAddressLine2, lblCity, lblState, lblZipCode});

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAddressLine1, txtAddressLine2, txtFirstName, txtLastName});

        PersonalPanelLayout.setVerticalGroup(
            PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PersonalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(lblMiddleName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoneNumber))
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PersonalPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PersonalPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(3, 3, 3)
                .addComponent(rdoGroupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCity)
                    .addComponent(lblAddressLine1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblZipCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblState))
                    .addComponent(lblAddressLine2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(lblStatusDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PersonalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btndelete)
                    .addComponent(addButton)
                    .addComponent(btnUpdate)
                    .addComponent(btnClear)
                    .addComponent(btnDisplay))
                .addGap(234, 234, 234))
        );

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAddressLine1, lblAddressLine2, lblCity, lblState});

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAddressLine1, txtCity});

        PersonalPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtFirstName, txtLastName, txtMiddleName});

        jScrollPane3.setViewportView(PersonalPanel);

        javax.swing.GroupLayout CustomerInfoPanelLayout = new javax.swing.GroupLayout(CustomerInfoPanel);
        CustomerInfoPanel.setLayout(CustomerInfoPanelLayout);
        CustomerInfoPanelLayout.setHorizontalGroup(
            CustomerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerInfoPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        CustomerInfoPanelLayout.setVerticalGroup(
            CustomerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CustomerInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CustomerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   /*
    ** This method is called when Add Button is clicked. The add/ Save button
    ** accepts all the values from compoenents inside the form and send the same
    ** to be saved int he file.
    */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

     boolean status = false;
     boolean checkStatus = checkComponents(); // check if the componenets satisfy the conditions.
     if(checkStatus)
     {     
         /*
         ** Perform addition operation once componenets are checked
         */
     try 
     {
        status = addContact();
     } 
     catch (IOException ex) 
     {
        status = false;
     }  
     if(status != false)
    {
        lblStatusDisplay.setText("Record added successfully.");
        try {
              reInitialize();
            } catch (IOException ex) {
                                    Logger.getLogger(ContactManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
            clearComponents();
        }
        else
            lblStatusDisplay.setText("Duplicate entry. Error trying to add record.");
      }
     
     clearColorCode(); // clear all text field that sustains color.
        
    }//GEN-LAST:event_addButtonActionPerformed
    /*
    ** This method is called when Update Button is clicked. The Update button
    ** accepts all the values from componenets inside the form and updates the 
    ** record selected in the table. Updates the record in the file.
    */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // TODO add your handling code here:
            //take the line from the componenets and insert that into file..
            boolean updateStatus = updateRecord(); // method to update the selected record
            if(updateStatus)
            {
               
                //JOptionPane.showMessageDialog(null, "Record has been updated successfully");
                lblStatusDisplay.setText("Record has been updated successfully.");
                btnUpdate.setVisible(true);
                btndelete.setVisible(true);
                reInitialize();
            }
            else
                lblStatusDisplay.setText("Update failed. Please try again.");
            
        } catch (IOException ex) {
            Logger.getLogger(ContactManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        clearColorCode();
    }//GEN-LAST:event_btnUpdateActionPerformed

    /*
    ** This method is called when Delete Button is clicked. The Delete button
    ** selects the record from table. Passes the data to file and deletes 
    ** the same from both the table and file. Updated records are then
    ** shown int he table.
    */
    
    
    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        //local initialization
        boolean deleteStatus = false;
       //Row & Column to select from the table.
        int row = myTable.getSelectedRow();
        int col = myTable.getSelectedColumnCount();
        ContactManagerController cmc = new ContactManagerController();
        List<String> rowContent = new ArrayList<String>(col);
        //get column values from table.
        for(int i=0 ; i<3 ;i++)
        {
           String value = (myTable.getValueAt(row, i)).toString();
           rowContent.add(value);
        }
        /*
        * Pass row content as a string and delete the same record from the file.
        * Delete the record in file. 
        */
        try {
            deleteStatus = cmc.deleteRecordInFile(rowContent); 
        } catch (IOException ex) {
            Logger.getLogger(ContactManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(deleteStatus)
        {  
            try {
                reInitialize(); // reinitialize the table from the file.
            } catch (IOException ex) {
                Logger.getLogger(ContactManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        clearComponents();
        //JOptionPane.showMessageDialog(null, "Record has been deleted successfully");
        lblStatusDisplay.setText("Record has been deleted successfully.");
        }
        else
            lblStatusDisplay.setText("Error in deleting record. Please try again");
        clearColorCode();
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
//        try {
//            // TODO add your handling code here:
//            reInitialize();
//        } catch (IOException ex) {
//            Logger.getLogger(ContactManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void myTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myTableMouseClicked
        /*
         ** This method is called when a record in a table is clicked.
         ** Once a record is selected , all the details need to be populated
         ** into their respective componenets. 
        */
        btnUpdate.setEnabled(true);btndelete.setEnabled(true);addButton.setEnabled(false);
        try
        {
            int row = myTable.getSelectedRow(); // get the row selected by user
            String contactFirstName = (myTable.getModel().getValueAt(row, 0)).toString();
            String contactLastName = (myTable.getModel().getValueAt(row, 2)).toString();
            retrieveContactFromFile(contactFirstName , contactLastName); // update form components.
        }
        catch(Exception e){
        }
    }//GEN-LAST:event_myTableMouseClicked

    private void txtPhoneNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneNumberActionPerformed

    private void rdoMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoMaleActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Clear all textfileds and clear any selections in the table.
      clearComponents(); 
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtFirstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusGained
        // set background color of textfield when selected.
        txtFirstName.setBackground(Color.WHITE);
        
    }//GEN-LAST:event_txtFirstNameFocusGained

    private void txtFirstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusLost
        // Textfield changes to yellow color to help user show the entered text field.
        if (!(txtFirstName.getText().equals("")))
        {
            txtFirstName.setBackground(Color.getHSBColor(60, 40, 100));
        }
     // text field length check;
         if((txtFirstName.getText().length()> 20)){
            lblStatusDisplay.setText("First Name should not exceed 20 characters"); }
       // Special characters check.
         String checkRegex = "^[a-zA-Z0-9 ]*$";
            String data = txtFirstName.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ]*$")))
            {lblStatusDisplay.setText("First Name should contain only characters");
            }
         
    }//GEN-LAST:event_txtFirstNameFocusLost

    private void txtMiddleNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMiddleNameFocusGained
        // TODO add your handling code here:

        txtMiddleName.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtMiddleNameFocusGained

    private void txtMiddleNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMiddleNameFocusLost
        // TODO add your handling code here:
        if (!(txtMiddleName.getText().equals("")))
        {
            txtMiddleName.setBackground(Color.getHSBColor(60, 40, 100));
        }
        if(txtMiddleName.getText().length() > 1)
        {
             lblStatusDisplay.setText("Middle Name should not exceed 1 character in length");

        }
            String data = txtMiddleName.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ]*$")))
            {lblStatusDisplay.setText("Middle Name should contain only characters");
            }
        
    }//GEN-LAST:event_txtMiddleNameFocusLost

    private void txtLastNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastNameFocusGained
        // TODO add your handling code here:        
        txtLastName.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtLastNameFocusGained

    private void txtLastNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastNameFocusLost
        // TODO add your handling code here:
        if (!(txtLastName.getText().equals("")))
        {
            txtLastName.setBackground(Color.getHSBColor(60, 40, 100));
        }
        if((txtLastName.getText().length()> 20))
            lblStatusDisplay.setText("Last Name should not exceed 20 character in length");
        
         String data = txtLastName.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ]*$")))
            {lblStatusDisplay.setText("Last Name should contain only characters");
            }
    }//GEN-LAST:event_txtLastNameFocusLost

    private void txtPhoneNumberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneNumberFocusGained
        // TODO add your handling code here:

        txtPhoneNumber.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtPhoneNumberFocusGained

    private void txtPhoneNumberFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneNumberFocusLost
        // TODO add your handling code here:
        boolean status = true;
         if (!(txtPhoneNumber.getText().equals("")))
        {
            txtPhoneNumber.setBackground(Color.getHSBColor(60, 40, 100));
        }
         if((txtPhoneNumber.getText().length()> 21)){
            lblStatusDisplay.setText("Phone Number should not exceed 21 character in length");
         }
        String intRegexString = "[0-9]+"; 
       String data = txtPhoneNumber.getText();    
       if(!(data.matches(intRegexString)))
      {lblStatusDisplay.setText("Phone Number should contain only numbers");
      }
    }//GEN-LAST:event_txtPhoneNumberFocusLost

    private void txtFirstNamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtFirstNamePropertyChange
        // TODO add your handling code here:
          
    }//GEN-LAST:event_txtFirstNamePropertyChange

    private void txtAddressLine1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressLine1FocusGained

        txtAddressLine1.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtAddressLine1FocusGained

    private void txtAddressLine1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressLine1FocusLost
        // TODO add your handling code here:
         if (!(txtAddressLine1.getText().equals("")))
        {
            txtAddressLine1.setBackground(Color.getHSBColor(60, 40, 100));
        }
         if( (txtAddressLine1.getText().length() > 35 ))
        { 
            lblStatusDisplay.setText("Address Line 1 should not exceed 35 characters in length");
        }
         
         String data = txtAddressLine1.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ,.#]*$")))
            {lblStatusDisplay.setText("Address 1 should contain only # , characters");
            }        
    }//GEN-LAST:event_txtAddressLine1FocusLost

    private void txtAddressLine2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressLine2FocusGained
        // TODO add your handling code here:
        txtAddressLine2.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtAddressLine2FocusGained

    private void txtAddressLine2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddressLine2FocusLost
        // TODO add your handling code here:
        if (!(txtAddressLine2.getText().equals("")))
        {
            txtAddressLine2.setBackground(Color.getHSBColor(60, 40, 100));
        }
        
         if( (txtAddressLine2.getText().length() > 35 ))
        { 
            lblStatusDisplay.setText("Address Line 2 should not exceed 35 characters in length");
        }
         
         String data = txtAddressLine2.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ,#]*$")))
            {lblStatusDisplay.setText("Address 2 should contain ,# characters");
            }
         
    }//GEN-LAST:event_txtAddressLine2FocusLost

    private void txtCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusGained
        // TODO add your handling code here:
        txtCity.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtCityFocusGained

    private void txtCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusLost
        // TODO add your handling code here:
        if (!(txtCity.getText().equals("")))
        {
            txtCity.setBackground(Color.getHSBColor(60, 40, 100));
        }

        
        if((txtCity.getText().length() > 25))
             lblStatusDisplay.setText("City should not exceed 25 characters in length");
        
        String data = txtCity.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ]*$")))
            {lblStatusDisplay.setText("City should not contain characters");
            }
    }//GEN-LAST:event_txtCityFocusLost

    private void txtStateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStateFocusGained
        // TODO add your handling code here:

        txtState.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtStateFocusGained

    private void txtStateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStateFocusLost
        // TODO add your handling code here:
        if (!(txtState.getText().equals("")))
        {
            txtState.setBackground(Color.getHSBColor(60, 40, 100));
        }

         
          if((txtState.getText().length() > 2))
            lblStatusDisplay.setText("State should not exceed 2 characters in length");
          
          String data = txtState.getText();    
            if(!(data.matches("^[a-zA-Z0-9 ]*$")))
            {lblStatusDisplay.setText("State should not contain characters");
            }
    }//GEN-LAST:event_txtStateFocusLost

    private void txtZipCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtZipCodeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtZipCodeActionPerformed

    private void txtZipCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZipCodeFocusGained
        // TODO add your handling code here:
        txtZipCode.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtZipCodeFocusGained

    private void txtZipCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZipCodeFocusLost
        // TODO add your handling code here:
        
        if (!(txtZipCode.getText().equals("")))
        {
            txtZipCode.setBackground(Color.getHSBColor(60, 40, 100));
        }

        if(txtZipCode.getText().length() > 9)
             lblStatusDisplay.setText("ZipCode should not exceed 9 characters in length");
        
        String intRegexString = "[0-9]+"; 

            String data = txtZipCode.getText();    
            if(!(data.matches(intRegexString)))
            {lblStatusDisplay.setText("Zip Code should contain only numbers");
            }
    }//GEN-LAST:event_txtZipCodeFocusLost

    private void txtAddressLine1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressLine1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressLine1ActionPerformed

    private void rdoGroupPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rdoGroupPanelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoGroupPanelFocusLost

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel CustomerInfoPanel;
    public static javax.swing.JPanel PersonalPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton btnClear;
    public static javax.swing.JButton btnDisplay;
    public static javax.swing.JButton btnUpdate;
    public static javax.swing.JButton btndelete;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddressLine1;
    private javax.swing.JLabel lblAddressLine2;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMiddleName;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblState;
    public static javax.swing.JLabel lblStatusDisplay;
    private javax.swing.JLabel lblZipCode;
    public static javax.swing.JTable myTable;
    public static javax.swing.JRadioButton rdoFemale;
    private javax.swing.JPanel rdoGroupPanel;
    public static javax.swing.JRadioButton rdoMale;
    public static javax.swing.JTextField txtAddressLine1;
    public static javax.swing.JTextField txtAddressLine2;
    public static javax.swing.JTextField txtCity;
    public static javax.swing.JTextField txtFirstName;
    public static javax.swing.JTextField txtLastName;
    public static javax.swing.JTextField txtMiddleName;
    public static javax.swing.JTextField txtPhoneNumber;
    public static javax.swing.JTextField txtState;
    public static javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables
    
    /*
    ** Entry point of applciation. All fields are initialized along with form 
    ** componenets.
    */
    public static void main(String args[]) throws FileNotFoundException, IOException, InterruptedException
    {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactManagerFrame().setVisible(true);
            }
        });
        File file = new File("../Contact.txt");
        tableModel.setRowCount(0);
       Thread.sleep(1000);
        btndelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        myTable.setModel(tableModel);
        // initialize the table. Display records in the table at the start of the program.
        String fileLine = null; BufferedReader reader = null;
        reader = new BufferedReader(new FileReader(file));
            while((fileLine = reader.readLine()) != null) 
            {
            tableModel.addRow(fileLine.split("\t")); 
            }
            reader.close();
      }
       /*
         ** Reinitialize the table contents once its loaded.
         ** the method empties the table and records all the details from the 
         ** file and inserts the records into the table.
        */
    void reInitialize() throws IOException
    {
        
        tableModel.setColumnIdentifiers(columnNames);
        tableModel.setRowCount(0); // always clear the table before we update
         
        //read all data from input file ..  
        myTable.setModel(tableModel);
        String line = null;
        BufferedReader reader = null;
        try
        {       
            reader = new BufferedReader(new FileReader(file));
            while((line = reader.readLine()) != null) 
            {
            tableModel.addRow(line.split("\t")); 
            }
           reader.close(); 

         }
        catch(IOException e)
        {
        JOptionPane.showMessageDialog(null, "Error");
        e.printStackTrace();
    
        }
        reader.close();
    }
        /*
         ** This method collects all the details from Form components when user 
         ** clicks on the Add button / Save button.
        */
    
    public static boolean addContact() throws IOException
    {
      
        String fname = txtFirstName.getText().trim().toUpperCase();
        String lname = txtLastName.getText().trim().toUpperCase();
        String middleName = txtMiddleName.getText().toUpperCase();
        String city = txtCity.getText().trim().toUpperCase();
        String state = txtState.getText().trim().toUpperCase();
        String gender = null;
        String address1 = txtAddressLine1.getText().trim().toUpperCase();
        String address2 = txtAddressLine2.getText().trim().toUpperCase();
        String cityval = txtCity.getText().trim().toUpperCase();
        String stateVal = txtState.getText().trim().toUpperCase();
        String zipCode = txtZipCode.getText().trim();
        String phoneNumebr = txtPhoneNumber.getText().trim();
        boolean result;if(middleName.equals("")) middleName = " ";
        if(rdoMale.isSelected()) genderVal = "Male";
        else genderVal = "Female";
        ContactManagerController cmc = new ContactManagerController();
        boolean checkStatus = cmc.checkForDuplicates(fname,lname); // Check for duplicate record.
        if(!checkStatus)
        {
        ContactDetail newContact = null;
        newContact = new ContactDetail(fname,lname,middleName,genderVal,phoneNumebr,address1,address2,city,state,zipCode);
        //using the available data , we need 
        /// write onto file. and display in table.
        String addString = newContact.buildString();
        addString = cmc.AddToFile(addString);
        return true;
        }
        else
        {
            return false;
        }
}
 /*
  ** This method is used to retrieve COntact details from File. The method
  ** opens the Contact.txt file . It selects a record one by one.Identifies the 
   ** record and inserts the same into table.
 */
    void retrieveContactFromFile(String firstName , String lastName) throws FileNotFoundException, IOException
    {
        if(!file.exists())
        {
            File file = new File("../Contact.txt");
        }
        BufferedReader buf = new BufferedReader(new FileReader(file));
        String line = null;int indexfound = 0; int count =0;String foundString = null; 
        String[] inputValues = null;
        String[] contactRecord = new String[2];
        contactRecord[0] = firstName;
        contactRecord[1] = lastName;
        while((line = buf.readLine())!=null)
        {
            for(String record : contactRecord)
            {
             indexfound = line.indexOf(record);
            if (indexfound > -1) 
            { 
                count ++;
                if(count ==2 )
                {
                  foundString = line;
                }
            }
            else break;
            }
        }
        
        buf.close();
        inputValues = foundString.split("\t");
        
        txtFirstName.setText(inputValues[0]);
        txtMiddleName.setText(inputValues[1]);
        txtLastName.setText(inputValues[2]);
        String radioInput = inputValues[4];
        if("Male".equals(radioInput))
           rdoMale.setSelected(true);
        else rdoFemale.setSelected(true);
        txtPhoneNumber.setText(inputValues[3]);
        txtAddressLine1.setText(inputValues[5]);
        txtAddressLine2.setText(inputValues[6]);
        txtCity.setText(inputValues[7]);
        txtState.setText(inputValues[8]);
        txtZipCode.setText(inputValues[9]);

    }
 /*
  ** This method is used to clear all components in the table.
  ** Method also clears the selected row in the table.
 */
    
    void clearComponents()
    {
         txtFirstName.setText("");txtFirstName.setBackground(Color.WHITE);
        txtMiddleName.setText("");txtMiddleName.setBackground(Color.WHITE);
        txtLastName.setText("");txtLastName.setBackground(Color.WHITE);
        buttonGroup.clearSelection();txtPhoneNumber.setBackground(Color.WHITE); txtPhoneNumber.setText("");
        txtAddressLine1.setText("");txtAddressLine1.setBackground(Color.WHITE);
        txtAddressLine2.setText("");txtAddressLine2.setBackground(Color.WHITE);
        txtCity.setText("");txtCity.setBackground(Color.WHITE);
        txtState.setText("");txtState.setBackground(Color.WHITE);
        txtZipCode.setText("");txtZipCode.setBackground(Color.WHITE);
        btnUpdate.setEnabled(false);
        btndelete.setEnabled(false); 
        addButton.setEnabled(true); txtFirstName.requestFocus();
        myTable.getSelectionModel().clearSelection();
        
    }
 /*
  ** This method is used to update all components in the table to the file.
  ** After the update the records in the file are then inserted back into table.
 */
    
    boolean updateRecord() throws FileNotFoundException, IOException
    {
        String fname = txtFirstName.getText().trim().toUpperCase();
        String lname = txtLastName.getText().trim().toUpperCase();
        String middleName = txtMiddleName.getText();
        String city = txtCity.getText().trim().toUpperCase();
        String state = txtState.getText().trim().toUpperCase();
        String gender = genderVal;
        String address1 = txtAddressLine1.getText().trim().toUpperCase();
        String address2 = txtAddressLine2.getText().trim().toUpperCase();
        String cityval = txtCity.getText().trim().toUpperCase();
        String stateVal = txtState.getText().trim().toUpperCase();
        String zipCode = txtZipCode.getText().trim();
        String phoneNumebr = txtPhoneNumber.getText().trim();
        if(rdoMale.isSelected()) genderVal = "Male";
        else genderVal = "Female";if(middleName.equals("")) middleName = " ";
        ContactDetail replaceContact = new ContactDetail(fname,lname,middleName,genderVal,phoneNumebr,address1,address2,city,state,zipCode);
        ContactManagerController cmc = new ContactManagerController();
       boolean componentCheck = checkComponents();
//using the available data , we need 
        /// write onto file. and display in table.
        
        String addString = replaceContact.buildString();
       if(componentCheck){
        boolean updateSuccess = cmc.UpdateRecordInFile(addString, fname, lname);
        if(updateSuccess)
        {
           return true;
        }
        else{
            return false;
        }
        
    }
       return false;
    }
    
  boolean checkComponents()
   {
       String StringRegex = "[a-bA-B0-9]+"; 
       String fname = txtFirstName.getText().trim();
        String lname = txtLastName.getText().trim();
               String middleName = txtMiddleName.getText().trim();
        String city = txtCity.getText().trim();
       String state = txtState.getText().trim();
               String address1 = txtAddressLine1.getText().trim();
       String address2 = txtAddressLine2.getText().trim();
      String zipCode = txtZipCode.getText().trim();
        String phoneNumber = (txtPhoneNumber.getText());
        
       if(middleName.equals("")) middleName = " ";
       //Check if any of the components are empty
       ContactManagerController cmc = new ContactManagerController();
        boolean compStatus = cmc.checkComponents(fname , lname , middleName , city , state , address1 , address2 , zipCode , phoneNumber);
      return compStatus;
}
  
  /*
  ** Method clears all the colors if any in the Text Fields.
  */
        
  void clearColorCode()
  {
      txtFirstName.setBackground(Color.WHITE);
      txtMiddleName.setBackground(Color.WHITE);
      txtLastName.setBackground(Color.WHITE);
      txtPhoneNumber.setBackground(Color.WHITE); //txtPhoneNumber.setText("");
      txtAddressLine1.setBackground(Color.WHITE);
      txtAddressLine2.setBackground(Color.WHITE);
      txtCity.setBackground(Color.WHITE);
      txtState.setBackground(Color.WHITE);
      txtZipCode.setBackground(Color.WHITE);
       txtFirstName.requestFocus();
        myTable.getSelectionModel().clearSelection();
  }
}